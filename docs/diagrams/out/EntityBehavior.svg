<?xml version="1.0" encoding="UTF-8" standalone="no"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" contentStyleType="text/css" height="605px" preserveAspectRatio="none" style="width:1787px;height:605px;background:#FFFFFF;" version="1.1" viewBox="0 0 1787 605" width="1787px" zoomAndPan="magnify"><defs/><g><!--MD5=[099d3a988448bae6a13834713607e615]
cluster app.softnetwork.persistence.typed--><g id="cluster_app.softnetwork.persistence.typed"><path d="M8.5,6 L254.5,6 A3.75,3.75 0 0 1 257,8.5 L264,28.4883 L1777.5,28.4883 A2.5,2.5 0 0 1 1780,30.9883 L1780,595.5 A2.5,2.5 0 0 1 1777.5,598 L8.5,598 A2.5,2.5 0 0 1 6,595.5 L6,8.5 A2.5,2.5 0 0 1 8.5,6 " fill="none" style="stroke:#000000;stroke-width:1.5;"/><line style="stroke:#000000;stroke-width:1.5;" x1="6" x2="264" y1="28.4883" y2="28.4883"/><text fill="#000000" font-family="sans-serif" font-size="14" font-weight="bold" lengthAdjust="spacing" textLength="245" x="10" y="21.5352">app.softnetwork.persistence.typed</text></g><!--MD5=[e8dbbcecc707ce203655be52ea7e778f]
class CommandTypeKey--><g id="elem_CommandTypeKey"><rect codeLine="7" fill="#F1F1F1" height="65.1094" id="CommandTypeKey" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="393" x="736.5" y="41"/><ellipse cx="825.25" cy="61.3105" fill="#9B9B9B" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M826.5918,68.5605 L824.1431,68.5605 L824.1431,58.3091 L820.9971,58.3091 L820.9971,56.1675 L829.7378,56.1675 L829.7378,58.3091 L826.5918,58.3091 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="35" x="892.25" y="57.6016">«trait»</text><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="128" x="845.75" y="73.668">CommandTypeKey</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="77" x="1055.5" y="38"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="75" x="1056.5" y="50.6016">C: Command</text><line style="stroke:#181818;stroke-width:0.5;" x1="737.5" x2="1128.5" y1="81.6211" y2="81.6211"/><ellipse cx="747.5" cy="95.3652" fill="#A6A6A6" rx="3" ry="3" style="stroke:#545454;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="367" x="756.5" y="99.1563">def TypeKey(implicit c: ClassTag[C]): EntityTypeKey[C]</text></g><path d="M1164.5,56 L1164.5,64.6553 L1123.5,93.8652 L1164.5,72.6553 L1164.5,81.3105 A0,0 0 0 0 1164.5,81.3105 L1569.5,81.3105 A0,0 0 0 0 1569.5,81.3105 L1569.5,66 L1559.5,56 L1164.5,56 A0,0 0 0 0 1164.5,56 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><path d="M1559.5,56 L1559.5,66 L1569.5,66 L1559.5,56 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="384" x="1170.5" y="73.5684">A key that uniquely identifies the type of entity in the cluster</text><!--MD5=[17e34bb08d6dbd954abf74c1535bbf85]
class EntityBehavior--><g id="elem_EntityBehavior"><rect codeLine="13" fill="#F1F1F1" height="221.5039" id="EntityBehavior" rx="2.5" ry="2.5" style="stroke:#181818;stroke-width:0.5;" width="843" x="511.5" y="263"/><ellipse cx="729.75" cy="283.3105" fill="#9B9B9B" rx="11" ry="11" style="stroke:#181818;stroke-width:1.0;"/><path d="M731.0918,290.5605 L728.6431,290.5605 L728.6431,280.3091 L725.4971,280.3091 L725.4971,278.1675 L734.2378,278.1675 L734.2378,280.3091 L731.0918,280.3091 Z " fill="#000000"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="35" x="781.25" y="279.6016">«trait»</text><text fill="#000000" font-family="sans-serif" font-size="14" font-style="italic" lengthAdjust="spacing" textLength="97" x="750.25" y="295.668">EntityBehavior</text><rect fill="#FFFFFF" height="16.1328" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:2.0,2.0;" width="299" x="1058.5" y="260"/><text fill="#000000" font-family="sans-serif" font-size="12" font-style="italic" lengthAdjust="spacing" textLength="297" x="1059.5" y="272.6016">C: Command, S: State, E: Event, R: CommandResult</text><line style="stroke:#181818;stroke-width:0.5;" x1="512.5" x2="1353.5" y1="303.6211" y2="303.6211"/><ellipse cx="522.5" cy="317.3652" fill="none" rx="3" ry="3" style="stroke:#545454;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="203" x="531.5" y="321.1563">def snapshotInterval: Int = 10</text><ellipse cx="522.5" cy="333.8535" fill="none" rx="3" ry="3" style="stroke:#545454;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="221" x="531.5" y="337.6445">def numberOfSnapshots: Int = 2</text><ellipse cx="522.5" cy="350.3418" fill="none" rx="3" ry="3" style="stroke:#545454;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="166" x="531.5" y="354.1328">def persistenceId: String</text><ellipse cx="522.5" cy="366.8301" fill="none" rx="3" ry="3" style="stroke:#545454;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="131" x="531.5" y="370.6211">def role: String = ""</text><ellipse cx="522.5" cy="383.3184" fill="none" rx="3" ry="3" style="stroke:#545454;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="227" x="531.5" y="387.1094">val emptyState: Option[S] = None</text><line style="stroke:#181818;stroke-width:0.5;" x1="512.5" x2="1353.5" y1="394.0625" y2="394.0625"/><ellipse cx="522.5" cy="407.8066" fill="#A6A6A6" rx="3" ry="3" style="stroke:#545454;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="601" x="531.5" y="411.5977">def init(system: ActorSystem[_], maybeRole: Option[String])(implicit c: ClassTag[C]): Unit</text><polygon fill="#E9E9E9" points="522.5,419.2949,526.5,423.2949,522.5,427.2949,518.5,423.2949" style="stroke:#8C8C8C;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="422" x="531.5" y="428.0859">def tagEvent(entityId: String, event: E): Set[String] = Set.empty</text><ellipse cx="522.5" cy="440.7832" fill="#A6A6A6" rx="3" ry="3" style="stroke:#545454;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="817" x="531.5" y="444.5742">def handleCommand(entityId: String, state: Option[S], command: C, replyTo: Option[ActorRe[R]], ...): Effect[E, Option[S]]</text><ellipse cx="522.5" cy="457.2715" fill="#A6A6A6" rx="3" ry="3" style="stroke:#545454;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="593" x="531.5" y="461.0625">def handleEvent(state: Option[S], event: E)(implicit context: ActorContext[_]): Option[S]</text><ellipse cx="522.5" cy="473.7598" fill="#A6A6A6" rx="3" ry="3" style="stroke:#545454;stroke-width:1.0;"/><text fill="#000000" font-family="sans-serif" font-size="14" lengthAdjust="spacing" textLength="609" x="531.5" y="477.5508">def postRecoveryCompleted(state: Option[S])(implicit context: ActorContext[C]): Unit = {}</text></g><path d="M22,166 L22,191.3105 A0,0 0 0 0 22,191.3105 L476,191.3105 A0,0 0 0 0 476,191.3105 L476,184 L515.5,315.8652 L476,176 L476,176 L466,166 L22,166 A0,0 0 0 0 22,166 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><path d="M466,166 L466,176 L476,176 L466,166 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="433" x="28" y="183.5684">number of events before saving a snapshot of the current actor state</text><path d="M22,201.3105 L22,226.6211 A0,0 0 0 0 22,226.6211 L228,226.6211 A0,0 0 0 0 228,226.6211 L228,219.3105 L515.5,332.3535 L228,211.3105 L228,211.3105 L218,201.3105 L22,201.3105 A0,0 0 0 0 22,201.3105 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><path d="M218,201.3105 L218,211.3105 L228,211.3105 L218,201.3105 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="185" x="28" y="218.8789">number of snapshots to keep</text><path d="M22,236.6211 L22,307.8633 A0,0 0 0 0 22,307.8633 L387,307.8633 A0,0 0 0 0 387,307.8633 L387,276.2422 L515.5,348.8418 L387,268.2422 L387,246.6211 L377,236.6211 L22,236.6211 A0,0 0 0 0 22,236.6211 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><path d="M377,236.6211 L377,246.6211 L387,246.6211 L377,236.6211 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="288" x="28" y="254.1895">The key used to define the EntityTypeKey that</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="344" x="28" y="269.5">uniquely identifies the type of this entity in the cluster</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="256" x="28" y="284.8105">and is then used to retrieve the EntityRef</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="168" x="28" y="300.1211">for a given entity identifier</text><path d="M22,317.8633 L22,358.4844 A0,0 0 0 0 22,358.4844 L268,358.4844 A0,0 0 0 0 268,358.4844 L268,342.1738 L515.5,381.8184 L268,334.1738 L268,327.8633 L258,317.8633 L22,317.8633 A0,0 0 0 0 22,317.8633 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><path d="M258,317.8633 L258,327.8633 L268,327.8633 L258,317.8633 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="225" x="28" y="335.4316">the intial state for this entity before</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="202" x="28" y="350.7422">any events have been processed</text><path d="M22,368.4844 L22,439.7266 A0,0 0 0 0 22,439.7266 L363,439.7266 A0,0 0 0 0 363,439.7266 L363,408.1055 L515.5,406.3066 L363,400.1055 L363,378.4844 L353,368.4844 L22,368.4844 A0,0 0 0 0 22,368.4844 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><path d="M353,368.4844 L353,378.4844 L363,378.4844 L353,368.4844 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="255" x="28" y="386.0527">Initialize sharding for this EntityTypeKey</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="320" x="28" y="401.3633">It will start a shard region or a proxy depending on</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="268" x="28" y="416.6738">if an optional node role has been specified</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="198" x="28" y="431.9844">and if this node has such a role</text><path d="M22,449.7266 L22,520.9688 A0,0 0 0 0 22,520.9688 L311,520.9688 A0,0 0 0 0 311,520.9688 L311,489.3477 L515.5,455.7715 L311,481.3477 L311,459.7266 L301,449.7266 L22,449.7266 A0,0 0 0 0 22,449.7266 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><path d="M301,449.7266 L301,459.7266 L311,459.7266 L301,449.7266 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="268" x="28" y="467.2949">This method is invoked whenever an event</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="217" x="28" y="482.6055">has been persisted successfully or</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="237" x="28" y="497.916">for each event that has to be replayed</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="180" x="28" y="513.2266">when the entity is started up</text><path d="M22,530.9688 L22,571.5898 A0,0 0 0 0 22,571.5898 L285,571.5898 A0,0 0 0 0 285,571.5898 L285,555.2793 L515.5,472.2598 L285,547.2793 L285,540.9688 L275,530.9688 L22,530.9688 A0,0 0 0 0 22,530.9688 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><path d="M275,530.9688 L275,540.9688 L285,540.9688 L275,530.9688 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="242" x="28" y="548.5371">called just after the state of this entity</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="203" x="28" y="563.8477">has been successfully recovered</text><path d="M1390,267.5 L1390,291.4658 L662.5,365.3301 L1390,299.4658 L1390,323.4316 A0,0 0 0 0 1390,323.4316 L1764,323.4316 A0,0 0 0 0 1764,323.4316 L1764,277.5 L1754,267.5 L1390,267.5 A0,0 0 0 0 1390,267.5 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><path d="M1754,267.5 L1754,277.5 L1764,277.5 L1754,267.5 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="269" x="1396" y="285.0684">node role required to start this entity actor</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="353" x="1396" y="300.3789">The node roles are defined in the configuration property</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="158" x="1396" y="315.6895">named akka.cluster.roles</text><path d="M1390,333.4316 L1390,349.7422 L953.5,422.7949 L1390,357.7422 L1390,374.0527 A0,0 0 0 0 1390,374.0527 L1725,374.0527 A0,0 0 0 0 1725,374.0527 L1725,343.4316 L1715,333.4316 L1390,333.4316 A0,0 0 0 0 1390,333.4316 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><path d="M1715,333.4316 L1715,343.4316 L1725,343.4316 L1715,333.4316 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="220" x="1396" y="351">associate a set of tags to the event</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="314" x="1396" y="366.3105">before the latter will be appended to the event log</text><path d="M1390,384.0527 L1390,423.3291 L1348.5,439.2832 L1390,431.3291 L1390,470.6055 A0,0 0 0 0 1390,470.6055 L1763,470.6055 A0,0 0 0 0 1763,470.6055 L1763,394.0527 L1753,384.0527 L1390,384.0527 A0,0 0 0 0 1390,384.0527 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><path d="M1753,384.0527 L1753,394.0527 L1763,394.0527 L1753,384.0527 " fill="#FAFAFA" style="stroke:#181818;stroke-width:0.5;"/><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="68" x="1396" y="401.6211">handle any</text><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="67" x="1468" y="401.6211">command</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="148" x="1539" y="401.6211">sent to this entity actor</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="161" x="1396" y="416.9316">The actor uses its current</text><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="33" x="1561" y="416.9316">state</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="267" x="1396" y="432.2422">to determine how to handle the command,</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="191" x="1396" y="447.5527">and may generate one or more</text><text fill="#000000" font-family="sans-serif" font-size="13" font-weight="bold" lengthAdjust="spacing" textLength="45" x="1591" y="447.5527">events</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="108" x="1640" y="447.5527">before eventually</text><text fill="#000000" font-family="sans-serif" font-size="13" lengthAdjust="spacing" textLength="158" x="1396" y="462.8633">responding to the sender</text><!--MD5=[547b55527546978905e717f1e92824c6]
reverse link CommandTypeKey to EntityBehavior--><g id="link_CommandTypeKey_EntityBehavior"><path d="M933,127.22 C933,164.65 933,216.28 933,262.55 " fill="none" id="CommandTypeKey-backto-EntityBehavior" style="stroke:#181818;stroke-width:1.0;stroke-dasharray:7.0,7.0;"/><polygon fill="none" points="926,127.44,933,107.44,940,127.44,926,127.44" style="stroke:#181818;stroke-width:1.0;"/></g><!--MD5=[e520b7605817c62fefa1afbdc1e9d0d7]
@startuml EntityBehavior
'https://plantuml.com/class-diagram

skinparam monochrome true
hide empty members

package app.softnetwork.persistence.typed {
    abstract class CommandTypeKey <C: Command> <<(T,orchid) trait >> {
        +def TypeKey(implicit c: ClassTag[C]): EntityTypeKey[C]
    }
    note right of CommandTypeKey::TypeKey
        A key that uniquely identifies the type of entity in the cluster
    end note
    abstract class EntityBehavior <C: Command, S: State, E: Event, R: CommandResult> <<(T,orchid) trait >> implements CommandTypeKey {
        +def snapshotInterval: Int = 10
        +def numberOfSnapshots: Int = 2
        +def persistenceId: String
        +def role: String = ""
        +val emptyState: Option[S] = None
        +def init(system: ActorSystem[_], maybeRole: Option[String])(implicit c: ClassTag[C]): Unit
        #def tagEvent(entityId: String, event: E): Set[String] = Set.empty
        +def handleCommand(entityId: String, state: Option[S], command: C, replyTo: Option[ActorRe[R]], ...): Effect[E, Option[S]]
        +def handleEvent(state: Option[S], event: E)(implicit context: ActorContext[_]): Option[S]
        +def postRecoveryCompleted(state: Option[S])(implicit context: ActorContext[C]): Unit = {}
    }
    note left of EntityBehavior::snapshotInterval
        number of events before saving a snapshot of the current actor state
    end note
    note left of EntityBehavior::numberOfSnapshots
        number of snapshots to keep
    end note
    note left of EntityBehavior::persistenceId
        The key used to define the EntityTypeKey that
        uniquely identifies the type of this entity in the cluster
        and is then used to retrieve the EntityRef
        for a given entity identifier
    end note
    note right of EntityBehavior::role
        node role required to start this entity actor
        The node roles are defined in the configuration property
        named akka.cluster.roles
    end note
    note left of EntityBehavior::emptyState
        the intial state for this entity before
        any events have been processed
    end note
    note left of EntityBehavior::init
        Initialize sharding for this EntityTypeKey
        It will start a shard region or a proxy depending on
        if an optional node role has been specified
        and if this node has such a role
    end note
    note right of EntityBehavior::tagEvent
        associate a set of tags to the event
        before the latter will be appended to the event log
    end note
    note right of EntityBehavior::handleCommand
        handle any **command** sent to this entity actor
        The actor uses its current **state**
        to determine how to handle the command,
        and may generate one or more **events** before eventually
        responding to the sender
    end note
    note left of EntityBehavior::handleEvent
        This method is invoked whenever an event
        has been persisted successfully or
        for each event that has to be replayed
        when the entity is started up
    end note
    note left of EntityBehavior::postRecoveryCompleted
        called just after the state of this entity
        has been successfully recovered
    end note
}

@enduml

@startuml EntityBehavior

skinparam monochrome true
hide empty members

package app.softnetwork.persistence.typed {
    abstract class CommandTypeKey <C: Command> <<(T,orchid) trait >> {
        +def TypeKey(implicit c: ClassTag[C]): EntityTypeKey[C]
    }
    note right of CommandTypeKey::TypeKey
        A key that uniquely identifies the type of entity in the cluster
    end note
    abstract class EntityBehavior <C: Command, S: State, E: Event, R: CommandResult> <<(T,orchid) trait >> implements CommandTypeKey {
        +def snapshotInterval: Int = 10
        +def numberOfSnapshots: Int = 2
        +def persistenceId: String
        +def role: String = ""
        +val emptyState: Option[S] = None
        +def init(system: ActorSystem[_], maybeRole: Option[String])(implicit c: ClassTag[C]): Unit
        #def tagEvent(entityId: String, event: E): Set[String] = Set.empty
        +def handleCommand(entityId: String, state: Option[S], command: C, replyTo: Option[ActorRe[R]], ...): Effect[E, Option[S]]
        +def handleEvent(state: Option[S], event: E)(implicit context: ActorContext[_]): Option[S]
        +def postRecoveryCompleted(state: Option[S])(implicit context: ActorContext[C]): Unit = {}
    }
    note left of EntityBehavior::snapshotInterval
        number of events before saving a snapshot of the current actor state
    end note
    note left of EntityBehavior::numberOfSnapshots
        number of snapshots to keep
    end note
    note left of EntityBehavior::persistenceId
        The key used to define the EntityTypeKey that
        uniquely identifies the type of this entity in the cluster
        and is then used to retrieve the EntityRef
        for a given entity identifier
    end note
    note right of EntityBehavior::role
        node role required to start this entity actor
        The node roles are defined in the configuration property
        named akka.cluster.roles
    end note
    note left of EntityBehavior::emptyState
        the intial state for this entity before
        any events have been processed
    end note
    note left of EntityBehavior::init
        Initialize sharding for this EntityTypeKey
        It will start a shard region or a proxy depending on
        if an optional node role has been specified
        and if this node has such a role
    end note
    note right of EntityBehavior::tagEvent
        associate a set of tags to the event
        before the latter will be appended to the event log
    end note
    note right of EntityBehavior::handleCommand
        handle any **command** sent to this entity actor
        The actor uses its current **state**
        to determine how to handle the command,
        and may generate one or more **events** before eventually
        responding to the sender
    end note
    note left of EntityBehavior::handleEvent
        This method is invoked whenever an event
        has been persisted successfully or
        for each event that has to be replayed
        when the entity is started up
    end note
    note left of EntityBehavior::postRecoveryCompleted
        called just after the state of this entity
        has been successfully recovered
    end note
}

@enduml

PlantUML version 1.2022.12(Sun Oct 23 20:12:26 CEST 2022)
(GPL source distribution)
Java Runtime: OpenJDK Runtime Environment
JVM: OpenJDK 64-Bit Server VM
Default Encoding: UTF-8
Language: fr
Country: FR
--></g></svg>