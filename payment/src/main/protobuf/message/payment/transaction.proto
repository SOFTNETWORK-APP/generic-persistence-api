syntax = "proto2";

import "scalapb/scalapb.proto";
import "model/payment/transaction.proto";

package app.softnetwork.payment.message.TransactionEvents;

option (scalapb.options) = {
    single_file: true
    flat_package: true
    import: "app.softnetwork.persistence.message._"
    import: "app.softnetwork.persistence.model._"
    import: "app.softnetwork.serialization._"
    import: "app.softnetwork.payment.model._"
    import: "app.softnetwork.payment.message.PaymentEvents._"
    import: "app.softnetwork.payment.serialization._"
    preserve_unknown_fields: false
    preamble: "trait TransactionFailedEvent extends PaymentEvent with BroadcastEvent {def orderUuid: String; val externalUuid: String = orderUuid;}"
};

message PreAuthorizeFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "TransactionFailedEvent";
    required string orderUuid = 1;
    required string resultMessage = 2;
    optional app.softnetwork.payment.model.Transaction transaction = 3;
}

message PayInFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "TransactionFailedEvent";
    required string orderUuid = 1;
    required string resultMessage = 2;
    optional app.softnetwork.payment.model.Transaction transaction = 3;
}

message PayOutFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "TransactionFailedEvent";
    required string orderUuid = 1;
    required string resultMessage = 2;
    optional app.softnetwork.payment.model.Transaction transaction = 3;
}

message RefundFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "TransactionFailedEvent";
    required string orderUuid = 1;
    required string resultMessage = 2;
    optional app.softnetwork.payment.model.Transaction transaction = 3;
}

message TransferFailedEvent {
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "TransactionFailedEvent";
    required string orderUuid = 1;
    required string resultMessage = 2;
    optional app.softnetwork.payment.model.Transaction transaction = 3;
}
