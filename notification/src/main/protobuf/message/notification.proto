syntax = "proto2";

import "scalapb/scalapb.proto";
import "model/notifications.proto";
import "message/schedule.proto";

package org.softnetwork.notification.message;

option (scalapb.options) = {
    single_file: true
    flat_package: true
    import: "app.softnetwork.persistence.message._"
    import: "org.softnetwork.akka.message.SchedulerEvents._"
    import: "app.softnetwork.persistence.model._"
    import: "app.softnetwork.notification.message._"
    import: "app.softnetwork.notification.model._"
    import: "org.softnetwork.notification.model._"
    preamble: "sealed trait NotificationEvent extends Event{def uuid: String}"
    preamble: "sealed trait NotificationRecordedEvent[T<:Notification] extends NotificationEvent{def notification: T; val uuid = notification.uuid}"
    preamble: "sealed trait NotificationToSchedulerEvent extends SchedulerEventWithCommand with NotificationEvent with Entity {val uuid = ALL_KEY}"
    preamble: "trait NotificationCommandEvent extends NotificationEvent"
    preamble: "trait AddNotificationCommandEvent extends NotificationCommandEvent {def notification: Notification; val uuid = notification.uuid}"
    preamble: "trait WrapNotificationCommandEvent extends NotificationCommandEvent {def event: NotificationCommandEvent; lazy val uuid = event.uuid}"
    preserve_unknown_fields: false
};

message MailRecordedEvent{
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "NotificationRecordedEvent[Mail]";
    required org.softnetwork.notification.model.Mail notification = 1;
}

message SMSRecordedEvent{
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "NotificationRecordedEvent[SMS]";
    required org.softnetwork.notification.model.SMS notification = 1;
}

message PushRecordedEvent{
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "NotificationRecordedEvent[Push]";
    required org.softnetwork.notification.model.Push notification = 1;
}

message NotificationRemovedEvent{
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "NotificationEvent";
    required string uuid = 1;
}

message ScheduleForNotificationAdded{
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "NotificationToSchedulerEvent";
    required app.softnetwork.scheduler.message.AddSchedule command = 1;
}

message ScheduleForNotificationRemoved{
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "NotificationToSchedulerEvent";
    required app.softnetwork.scheduler.message.RemoveSchedule command = 1;
}

message AddMailCommandEvent{
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "AddNotificationCommandEvent";
    required org.softnetwork.notification.model.Mail notification = 1;
}

message AddSMSCommandEvent{
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "AddNotificationCommandEvent";
    required org.softnetwork.notification.model.SMS notification = 1;
}

message AddPushCommandEvent{
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "AddNotificationCommandEvent";
    required org.softnetwork.notification.model.Push notification = 1;
}

message RemoveNotificationCommandEvent{
    option (scalapb.message).extends = "ProtobufEvent";
    option (scalapb.message).extends = "NotificationCommandEvent";
    required string uuid = 1;
}